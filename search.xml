<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GameFramework解析：资源(Resource)</title>
      <link href="/2024/11/24/gf_resource/"/>
      <url>/2024/11/24/gf_resource/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>资源这个模块有太多太多的东西，一开始我也想过把这个模块完完整整的去做一下详解，把每一个小模块都拿出来说一下，但这玩意要写的话，能说的地方和能讲的拓展实在太多了，以及伴随着工作上事情的越来越多，这个文章应该会逐步采用逐步更新的方式。</p><p>先来看一下GF官方的说明：</p><blockquote><p>为了保证玩家的体验，我们不推荐再使用同步的方式加载资源，由于 Game Framework 自身使用了一套完整的异步加载资源体系，因此只提供了异步加载资源的接口。不论简单的数据表、本地化字典，还是复杂的实体、场景、界面，我们都将使用异步加载。同时，Game Framework 提供了默认的内存管理策略（当然，你也可以定义自己的内存管理策略）。多数情况下，在使用 GameObject 的过程中，你甚至可以不需要自行进行 Instantiate 或者是 Destroy 操作。</p></blockquote><h2 id="打包方式和出包形式"><a href="#打包方式和出包形式" class="headerlink" title="打包方式和出包形式"></a>打包方式和出包形式</h2><p>先简单说一下通过ResourceEditor进行分包以及使用ResouceBuilder进行出包。以及这两个工具的使用方式和详细参数含义，可以参考官方文档和烟雨的文档，贴在了参考文档里面，方便自行查阅，这里就不浪费时间了。</p><p>打包菜单栏在GameFramework下的ResourceTools选项中。<br><img src="/img/gf_checkResourceTool.png" class="post-image" /></p><p>ResourceEditor:<br><img src="/img/gf_resourceEditor.png" class="post-image" /><br>如果你用的是官方的StarForce项目，那么打开就能看到已经分好的资源列表。这根据是否配置了FileSystem，对于配置了FileSystem的资源，最终在Package中会被整合在对应的包中，添加ResourceGroup参数则是进行会资源分组，如Base、Music。<br>对应数据的显示和配置都在ResourceCollection.xml文件里面。</p><p>这里以StarForce项目举例说明，通过ResourceBuilder打包，在Full文件夹下面可以看见所有已经被打好的包：<br><img src="/img/gf_resource_fullpackages.png" class="post-image" /></p><p>在Package文件则可以看到分好类后的包，这里的分类是根据FileSystem来的<br><img src="/img/gf_resource_pacakageResource.png" class="post-image" /></p><img src="/img/gf_resource_resourceCollection.png" class="post-image" />通过Editor打包页面和ResourceCollection.xml里面的详细信息我们可以得出：<ul><li>资源文件总数为128；</li><li>资源列表数量为21个，总共分成了21个资源包；</li><li>FileSystem总共有3个，分别是GameData，Resources以及UI，最终对应着Package文件夹下3个包;</li><li>ResourceGroups总共有2个，分别为base和Music。</li></ul><p>其他的环境配置和使用方式网上有很多资料说明，如果有需要可以在通过参考文档里面的链接进行自行查找。<br>初次使用的话，注意几个点就行：</p><ol><li><p>关于BuildInfo里面CheckVersionUrl的地址，在请求的时候会自动加上平台信息，没加的话路径就会出错。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProcedureCheckVersion.cs</span><br><span class="line"></span><br><span class="line">GameEntry.WebRequest.AddWebRequest(Utility.Text.Format(GameEntry.BuiltinData.BuildInfo.CheckVersionUrl, GetPlatformPath()), <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li><li><p>在单机模式使用Package文件夹里面的资源即可，但是在可更新模式里面，要上传的是Full文件夹里面的资源。</p></li><li><p>别忘了把流程中的校检流程给勾选上</p><img src="/img/gf_resource_verifyProcedure.png" class="post-image" /></li></ol><h2 id="资源模式"><a href="#资源模式" class="headerlink" title="资源模式"></a>资源模式</h2><p>GF的资源模式有四种，编辑器模式，单机模式，预加载的可更新模式以及边玩边下的更新模式。</p><h3 id="编辑器模式"><a href="#编辑器模式" class="headerlink" title="编辑器模式"></a>编辑器模式</h3><blockquote><p>在 Unity 编辑器中，可以考虑使用 Game Framework 提供的编辑器模式，直接从磁盘进行资源加载，而避免每次修改资源都要重新构建 AssetBundle，以提高开发效率。<br>当然，即使在 Unity 编辑器中，依然可以手动关闭编辑器模式，从 AssetBundle 加载资源，以模拟和真实运行环境一样的效果。</p></blockquote><p>编辑器模式并不需要去获取资源包，资源的加载逻辑位于EditorResourceComponent中，资源加载的形式是AssetDatabase，同时通过随机数延迟加载时间模拟异步加载的效果。</p><p>综上，编辑器模式在流程初始化的时候并不会做相关资源处理，在流程ProcedureSplash中，检测到如果是编辑器模式便会直接来到ProcedurePreload。</p><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><p>此模式游戏流程中资源的初始化：<br><img src="/img/gr_resource_process_package.png" class="post-image" /></p><p>单机模式并不需要对比版本信息，只需要根据当前版本信息从资源包里面加载对应的资源到内存中，并让它们接受管理。</p><ul><li>从进程中的ProcedureSplash开始，不同于上面的编辑器模式直接进入Preload,单机模式需要先初始化资源，因此需要先进入ProcedureInitResources中。</li><li>从此处开始通过ResourceComponent的逻辑执行GF层里面ResourceManager中ResourceIniter的功能进行资源的初始化。</li><li>ResourceIniter里面会加载版本信息，也就是放置于StreamingAssets下的GameFrameworkVersion.dat文件，而这部分的详细逻辑来到了ResouceHelper里面，这里便是DefaultResourceHelper里面的LoadBytes，获取相关的资源的二进制格式数据流。</li><li>通过单机模式的资源列表序列化器，从指定流中反序列化数据，通过数据头标识进行检查，在通过对应的资版本资源列表回调函数去执行对应的数据流，由此开始存入对应的版本信息，资源信息，资源组，文件系统等并在之后想对应的数据存入到ResourceManager的m_InternalResourceVersion，m_AssetInfos，m_ResourceInfos以及m_ResourceGroups等容器中，提供给全局。<br>m_AssetInfos对应便是资源文件总数，参考上面也就是128个。<br>m_ResourceInfos对应的便是资源列表数量，参考上面也就是21个，这种模式下资源包的准备情况(m_Ready)都是true，同样资源也都只在只读区。<br>m_ResourceGroups对应便是资源组数量，参考上面也就是2个。<br>以及这里资源列表回调函数是通过ResouceComponent里面手动注册的，包含0,1,2三种version，这是根据打包的具体情况自动决定的，无需额外操作。</li><li>等上面的一切都完成了，才会触发最初的回调，流程开始进入Preload中。</li></ul><h3 id="预加载更新模式"><a href="#预加载更新模式" class="headerlink" title="预加载更新模式"></a>预加载更新模式</h3><p>流程<br><img src="/img/gf_resource_process_updateMode.png" class="post-image" /></p><ul><li>对比版本信息，判断是否需要进行更新。在CheckVersion流程中向服务器请求版本信息的时候，也就是GameEntry.WebRequest.AddWebRequset这一步，GF里面加了平台的判断，在命名文件以及书写buildinfo的时候应当注意进行对应修改。版本信息拿到后，主要判断：<ul><li>是否需要强制更新游戏应用，也就是重新通过链接去下载客户端。</li><li>是否需要更新资源。这是通过对比本地版本文件信息(GameFrameworkVersion.dat)和远程信息文件的版本号是否相同来进行判断的。<br>如果需要的话，就会进入UpdateVersion流程去更新版本信息，如果不需要则可以直接进行资源的校检流程VerifyResources。<br>ResourceManager里面将版本检测更新等逻辑整合在了VersionListProcessor这个内部类里面。</li></ul></li><li>更新版本信息文件。来到UpdateVersionList这一步首先会去下载远程的GameFrameworkVersion.dat,在确定好当前下载完成后的信息和之前获取的远程版本信息一致后，进行解压，并将解压后的数据写入到文件流中，从而实现本地版本信息文件的更新。</li><li>获取本地的资源，进行资源的校检。来到VerifyResources流程，到这一步会去获取本地的GameFrameWorkList.dat文件，如果能获取到的话，就会直接通过资源列表序列化器(ReadWriteVersionListSerializer)获得版本列表信息，然后解析后存于本地并进行校检，检查本地资源的完成性，如果有问题就会移除当前有问题的资源信息，并重新写一个资源列表文件到本地；如果不能获取到资源列表，则说明本地没有，直接进入CheckResources流程。<br>这里的逻辑封装到了ResouceMangaer的内部类ResourceVerifier中。</li><li>检查本地资源信息是否和远程的资源对的上。首先会获取三个信息，远程的资源版本信息GameFrameworkVersion.dat(经过前面，已更新到本地的读写区)，本地的读写区和只读区资源列表信息GameFrameworkList.dat(存在没有的情况)。通过远程的资源版本信息获取此版本应有的资源信息，解析后加入到ResouceMgr对应容器里面，这一点和单机模式一致，不过此时还会加入到m_CheckInfos里面，用于后面进行资源校检。当这三者都加载完成后，会进行资源状态的检查，确定每一个资源的状态，判断其存在位置，是否需要更新，是否需要移除等，最终根据状态去执行对应的操作，比如需要更新的话，就会放入资源更新器(ResourceUpdater)里面去进行更新。统计和执行完成后则会进入UpdateResouces流程。<br>这一步逻辑的封装在ResourceManager的内部类ResourceChecker中。</li><li>打开资源更新页面，开始更新资源。更新完成之后就进入到ProcedurePreload流程中了。更新详细逻辑封装在ResourceManager的内部类ResourceUpdater中。</li></ul><h3 id="边玩边下更新模式"><a href="#边玩边下更新模式" class="headerlink" title="边玩边下更新模式"></a>边玩边下更新模式</h3><h2 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h2><h3 id="资源加载流程"><a href="#资源加载流程" class="headerlink" title="资源加载流程"></a>资源加载流程</h3><img src="/img/gf_resource_process_loadAsset.png" class="post-image" /><ul><li>加载的核心逻辑是封装到了ResourceLoader里面，ResourceManager里面各种重载的LoadAsset方法最终都会调用到ResourceLoader的LoadAsset方法。</li><li>CheckAsset，获取当前资源的信息和对应的依赖资源名称。此过程会依次获取AssetInfo以及ResourceInfo，这两者分别是从ResourceManager里面缓存的m_AssetInfos以及m_ResourceInfos里面进行获取的。AssetInfo里面存储的是当前资源的名称，依赖等基本信息，ResourceInfo里面则存储着更加详细的属性信息包括大小，加载方式以及当前资源的状态等。因此，我们检查状态的时候是通过ResourceInfo里面的Ready来进行判断的，而想要通过资源名字获取对应的ResourceInfo，则需要通过名称获取AssetInfo，再通过其字段ResourceName来筛选ResourceInfo，对于依赖资源信息则是通过AssetInfo里面的字段获取。</li><li>LoadDependencyAsset，加载依赖资源。如果当前资源有依赖资源，则会率先加载其依赖资源，当然如果依赖资源也有其依赖资源的话，仍会率先去进行加载，只有所有依赖资源加载完成后，才会加载当前资源。<br>这里问题来了，先前已经说过GF里面所有的资源加载都是异步的，这里当前资源和其依赖资源的加载都是异步，如何确保资源加载顺序？ 这里GF把具体的加载逻辑“外包”给了任务池模块。</li><li>如果当前的资源还没有“准备好”，那么就会放入资源更新器里面去进行更新状态。</li></ul><h3 id="任务池"><a href="#任务池" class="headerlink" title="任务池"></a>任务池</h3><p>任务池基础结构图<br><img src="/img/gf_taskPool_base.png" class="post-image" /><br>在资源模块中的应用的结构图<br><img src="/img/gf_resource_taskpool.png" class="post-image" /><br>通过结构图可以得知：</p><ul><li>TaskPool存在两个主要内容——Agent和Task。我们通过将Task添加进入TaskPool，然后由Agent去处理每一个Task，最终通过异步和回调的方式来实现资源的加载。</li><li>TaskPool中存储Agent的容器有两个——m_FreeAgent和m_WorkingAgent，顾名思义，m_FreeAgent是空闲的Agent，可以处理Task，而m_WorkingAgent里存储的便是正在处理Task的Agent。而存储Task的容器则只有一个m_WaitingTask，我们添加Task，便是添加到这个容器中，然后由Agent去处理Task。</li><li>Task有两种——LoadAssetTask和LoadDependencyAssetTask。这里我更倾向于将它们分别叫做主任务和子任务，当我们初步想要加载一个资源的时候，我们会创建一个主任务（LoadAssetTask），但这个时候不会立刻把它放进任务池里面，而是先去获取并加载其依赖资源，如果有依赖资源则会为其每个依赖资源创建子任务（dependencyAssetTask），并优先把子任务放进任务池里面，直到所有的依赖资源都添加进任务池，才会把主任务放进任务池。值得注意的是，依赖资源任务添加过程中，同样可能存在其依赖资源，因此子任务(LoadDependencyAssetTask)视情况也会成为其依赖资源加载的“主任务”，通过递归的方式来处理这种形式，就可以实现资源加载任务（Task）有条不絮的加入任务池里面。</li><li>加载和解析的逻辑位于Agent里面，而处理加载和解析的详细方式实现则是位于UGF层的Helper里面。这使得使用者可以根据实际项目情况去书写加载方式，而不修改GF层的结构。这里我们就以默认的DefaultLoadResourceAgent为例，来看看它是如何处理加载资源的。</li></ul><p>任务池任务加载流程：<br><img src="/img/gf_taskpool_process_running.png" class="post-image" /></p><p>ProcessWaitingTasks中status的四种状态对应的处理方式：<br><img src="/img/gf_taskPool_status.png" class="post-image" /></p><p>通过流程图可以更加直观的看到上述加载流程，而加载过程的进行时基于状态的判定，这里的话就是任务的状态，而这里任务的状态又对应着ResourceInfo里面的状态，<br>接着开始调查ResourceInfo的状态来源和管理器里面两个容器成员的来源吧</p><p>四种状态的含义：</p><ul><li>Done表示可以立刻完成此任务，这对应我们想要加载的资源(非场景)以及其依赖资源之前都被加载完成过，而当前资源被缓存到了对象池之中，我们直接拿出来用就可以。这种情况下，可以直接将agent从Working列表中移除，再把当前task从Waiting列表中移除，并进行释放。</li><li>CanResume表示可以继续处理当前任务，对应着两种情况<ol><li>虽然当前要在加载的资源之前未被使用过，但对应的包之前被加载过，可以直接从包里面异步加载此资源，只需要等待这个过程即可。</li><li>当前资源未被加载过，当前资源所在的资源包也没有被加载过，这就需要先把资源包加载出来，然后再去加载资源。<br>   这两种情况下，只能把task从Waiting列表中移除，当前agent还是处于Working列表中，不会释放任务。</li></ol></li><li>HasToWait表示不能继续处理此任务，需要等其他任务执行完成。这种情况对应着：<ol><li>当前资源包还没下载好，还在资源更新器里面进行处理；</li><li>当前资源正在加载中了，说明之前已经有agent处理过这个资源信息了，当前正在Working列表中；</li><li>当前资源依赖的资源还没加载完成，需要等待依赖资源加载完成；</li><li>当前资源的资源包还在加载中，对应的agent同样在Working列表中；<br>   这些个情况同样会把agent从Working列表中移除，但不会把task从Waiting列表中移除，也不会释放资task。</li></ol></li><li>UnknownError表示出现了未知错误，这是方便使用者根据可考虑到的意外情况进行特殊处理。这时候会完全把agent从Working列表中移除，把task从Waiting列表中移除，并释放资源。</li></ul><p>资源加载完成后，就可以通过Task里面的回调进行资源的传递和使用了。<br>同样，有问题欢迎指出。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://gameframework.cn/uncategorized/%e4%bd%bf%e7%94%a8-assetbundle-%e7%bc%96%e8%be%91%e5%99%a8/">官网_使用 AssetBundle 编辑工具</a></p></li><li><p><a href="https://gameframework.cn/uncategorized/%e4%bd%bf%e7%94%a8-assetbundle-%e7%bc%96%e8%be%91%e5%99%a8/">官网_使用 AssetBundle 构建工具</a></p></li><li><p><a href="https://blog.csdn.net/h824612113/article/details/124870294">打包和热更的环境配置和操作方式</a></p></li><li><p><a href="https://www.lfzxb.top/gameframework-reshotfix/">烟雨的资源热更新详解</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> GameFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GameFramework </tag>
            
            <tag> 资源 </tag>
            
            <tag> 热更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GameFramework解析：数据表(DataTable)</title>
      <link href="/2024/11/16/gf_dataTable/"/>
      <url>/2024/11/16/gf_dataTable/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>曾经听过这样一个故事，貌似在某个项目，某位程序大拿在项目中引入的导表工具不支持策划在Excel表中写入任何的中文，自然每张表中就没有策划任何的中文注释，程序的使用也是见招拆招，最终形成了一道天然的“防护壁垒”。最后拍拍屁股走人，可谓前人栽树后人遭殃，直到后面得遇高人，才使得配表这个功能幽而复明，回到正轨。<br>开个玩笑，让我们进入正题。<br>游戏开发中数据表是策划控制游戏各项功能实际运行的重要工具，是连接策划和程序的桥梁。它存储和管理者游戏中的各种数据，通过改表就可以对游戏中的各项数据和功能进行修改，提高了游戏设计和功能的可拓展性和灵活性。来看一下官方的定义：</p><blockquote><p>可以将游戏数据以表格（如 Microsoft Excel）的形式进行配置后，使用此模块使用这些数据表。数据表的格式是可以自定义的。</p></blockquote><h2 id="导表流程"><a href="#导表流程" class="headerlink" title="导表流程"></a>导表流程</h2><p>这里的导表可以分为两个阶段来说，一是生成数据表DR类，二是读取数据表里面的数据并提供给其他模块使用。</p><h3 id="生成数据表DR类"><a href="#生成数据表DR类" class="headerlink" title="生成数据表DR类"></a>生成数据表DR类</h3><img src="/img/gf_dataTable_process.png" class="post-image" />接下来就其几个流程进行单独的说明。<ul><li>GenerateDataTables：点击Unity自定义选项中的”Generate DataTables”按钮，就可以执行在DataTableGeneratorMenu类里面的GenerateDataTables方法。从这里开始执行导表逻辑。</li><li>GetDataTableNames: 获取所有需要导表的表名。这个环节在原作者的Star Force项目里面是通过在ProcedurePreload里面的静态字段进行定义的。当然也可以效仿花卷的塔防项目里面通过获取指定文件夹下面的所有txt文件并去掉后缀名来获取表名。</li><li>CreateDataTableProcessor: 遍历每个表，传入表名，创建一个DataTableProcessor实例，用来解析当前表里的各项数据。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTableProcessor <span class="title">CreateDataTableProcessor</span>(<span class="params"><span class="built_in">string</span> dataTableName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataTableProcessor(Utility.Path.GetRegularPath(Path.Combine(DataTablePath, dataTableName + <span class="string">&quot;.txt&quot;</span>)), Encoding.GetEncoding(<span class="string">&quot;GB2312&quot;</span>), <span class="number">1</span>, <span class="number">2</span>, <span class="literal">null</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过上面的代码传参值，最终其实对应的是指标的排版规则。对应着便是：<ul><li>nameRow &#x3D; 1 ,表示索引为1的行用于展示表的字段名称，注意不是表的名称，是表的字段名称。</li><li>typeRow &#x3D; 2,表示索引为2的行用于呈现表中各个字段的类型。</li><li>defaultValueRow &#x3D; null,表示不展示默认值。</li><li>commentRow &#x3D; 3，表示索引为3的行用于展示字段的注释。</li><li>contentStartRow &#x3D; 4,表示索引为4的行开始是表的正式内容。</li><li>idColumn &#x3D; 1，表示ID列的索引是1。</li></ul></li></ul><img src="/img/gf_dataTable_config.png" class="post-image" /><ul><li><p>GetDataProcessor: 针对表里的每个列字段类型，通过DataProcessorUtility获取对应的DataProcessor，用来解析当前列的数据。DataProcessorUtility的静态构造函数会在运行时自动加载好当前程序集中所有使用者定义的DataProcessor类型的实例，并通过它们GetTypeStrings方法返回的类型字符串属性进行索引，存储于字典中。<br>这里拿float类型举例。如果有一列的是数据类型是float类型，那么我们可以定义DataProcessor的派生类FloatProcessor,里面包含：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StarForce.Editor.DataTableTools</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DataTableProcessor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FloatProcessor</span> : <span class="title">GenericDataProcessor</span>&lt;<span class="title">float</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> IsSystem</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> LanguageKeyword</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;float&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span>[] <span class="title">GetTypeStrings</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;float&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;single&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;system.single&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">Parse</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">float</span>.Parse(<span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteToStream</span>(<span class="params">DataTableProcessor dataTableProcessor, BinaryWriter binaryWriter, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                binaryWriter.Write(Parse(<span class="keyword">value</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么我们只需要在配置表里面把对应的类型定义为GetTypeStrings里面包含的名称，然后通过此类型和传入的值就可以解析当前的列数据了。</p></li><li><p>CheckRawData: 通过正则表达式判断当前表中字段命名是否符合规范。</p></li><li><p>GenerateDataFile：创建每个表对应的二进制文件，并把数据对应写入。这也是为什么每一个对应的txt类型的表都有其对应的bytes类型的二进制文件。</p></li><li><p>GenerateCodeFile：创建每个表对应的代码文件，里面包含了对应的字段名称、类型、注释等信息，以及对应的解析方法。过程主要是通过每个表的类型和字段信息，去填补默认模版DataTableCodeTemplate.txt文件里面的内容。里面关于数据的解析方式区分系统和非系统，非系统或者不能直接转化的类型，都支持在DataTableExtension里面进行自定义解析和手动拓展。在生成数据表中每个字段的属性到DR类中后，会通过解析方法会根据传递的数据对本类的属性进行赋值。<br>这里还是用Entity表举例，生成的代码文件如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Game Framework</span></span><br><span class="line"><span class="comment">// Copyright © 2013-2021 Jiang Yin. All rights reserved.</span></span><br><span class="line"><span class="comment">// Homepage: https://gameframework.cn/</span></span><br><span class="line"><span class="comment">// Feedback: mailto:ellan@gameframework.cn</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 此文件由工具自动生成，请勿直接修改。</span></span><br><span class="line"><span class="comment">// 生成时间：2024-11-10 22:30:04.834</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> GameFramework;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityGameFramework.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StarForce</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 实体表。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DREntity</span> : <span class="title">DataRowBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> m_Id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取实体编号。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> Id</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_Id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取资源名称。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> AssetName</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">ParseDataRow</span>(<span class="params"><span class="built_in">string</span> dataRowString, <span class="built_in">object</span> userData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] columnStrings = dataRowString.Split(DataTableExtension.DataSplitSeparators);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; columnStrings.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                columnStrings[i] = columnStrings[i].Trim(DataTableExtension.DataTrimSeparators);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">            index++;</span><br><span class="line">            m_Id = <span class="built_in">int</span>.Parse(columnStrings[index++]);</span><br><span class="line">            index++;</span><br><span class="line">            AssetName = columnStrings[index++];</span><br><span class="line"></span><br><span class="line">            GeneratePropertyArray();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">ParseDataRow</span>(<span class="params"><span class="built_in">byte</span>[] dataRowBytes, <span class="built_in">int</span> startIndex, <span class="built_in">int</span> length, <span class="built_in">object</span> userData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(dataRowBytes, startIndex, length, <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (BinaryReader binaryReader = <span class="keyword">new</span> BinaryReader(memoryStream, Encoding.UTF8))</span><br><span class="line">                &#123;</span><br><span class="line">                    m_Id = binaryReader.Read7BitEncodedInt32();</span><br><span class="line">                    AssetName = binaryReader.ReadString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GeneratePropertyArray();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GeneratePropertyArray</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>这里可以看到，到目前为止，针对每一个数据表都有其对应的二进制文件和DR类了，但不难注意到每个DR类里面的数据表示的应该是当前数据表一行的数据，而不是整个表的数据。因此，接下来就需要加载表里面的数据并进行存储，再提供给其他模块进行获取。</p><h3 id="表数据的加载"><a href="#表数据的加载" class="headerlink" title="表数据的加载"></a>表数据的加载</h3><p>从这里开始就是涉及到框架中DataTableManager的逻辑范围了。DataTable模块结构类似于全局配置（Config）模块，都是DataTableManager主要用于存储数据，模块的核心控制逻辑位于DataProvider，而DataTableHelper则是负责数据表数据的加载和解析具体逻辑。<br>一般我们都是通过二进制文件进行加载的，因为这样速度要快一些。</p><p>整体结构图：<br><img src="/img/gf_dataTable.png" class="post-image" /><br>从结构图可以看出，DataTableManager主要是维护着m_DataTables里面的数据，而DataProvider存在于每一个DataTable实例中。其实一个DataTable实例对应的便是一个数据表的数据，通过DataProvider来进行数据的加载和解析，而具体解析的方式通过DataTableHelper里面定义方法来进行实现。</p><p>这里以Star Force项目为例，展示表数据的加载流程：<br><img src="/img/gf_dataTable_process_readData.png" class="post-image" /><br>是不是觉得和全局配置里面加载配置文件数据的流程很相似？因为两者的核心加载逻辑都是位于DataProvider中的，通过赋予DataProvider不同的类型的数据持有者以及不同的Helper，就可以保持整体结构不变的情况下实现数据资源的加载，解析，存储的流程。<br>这里就其中的环节说明一下：</p><ul><li>ParseData：在DefaultTableHelper的这个环节，其实读取的还是对应数据表的数据，一行行地把当前的数据传递给对应的DataTable实例，然后在DataTable实例中，才是通过DR类里面的ParseDataRow方法去解析自己的数据，最后，把这里解析好的数据根据ID存入DataTable实例里面的m_DataSet字典中。</li></ul><p>完成上面的数据加载环节后，我们就可以调用DataTable模块，首先获取对应的类型的DataTable实例，然后通过ID获取对应的DR实例，从而获取到具体的数据了。<br>这里还是以Entity表举例，在EntityExtension里面我们可以看到ShowEntity方法中的使用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IDataTable&lt;DREntity&gt; dtEntity = GameEntry.DataTable.GetDataTable&lt;DREntity&gt;();</span><br><span class="line">DREntity drEntity = dtEntity.GetDataRow(data.TypeId);</span><br></pre></td></tr></table></figure><h2 id="几个值得注意的点"><a href="#几个值得注意的点" class="headerlink" title="几个值得注意的点"></a>几个值得注意的点</h2><p>整个模块整体的结构和逻辑其实和全局配置模块很相似，故不再一一整理说明，这里就几个值得注意的点进行说明。</p><h3 id="关于数据类型的解析"><a href="#关于数据类型的解析" class="headerlink" title="关于数据类型的解析"></a>关于数据类型的解析</h3><p>如果当前提供的数据类型不满足需求，则需要自己手动添加，并添加其对应的解析Processor以及在DataTableExtension中新增对应的解析方法，</p><h3 id="TypeNamePair"><a href="#TypeNamePair" class="headerlink" title="TypeNamePair"></a>TypeNamePair</h3><p>在DataTableManager里面，对于DataTable的存储是用字典的形式进行的，而字典的键的类型则是TypeNamePair，这也是GF的基础拓展写法之一。它是一个结构体，通过将类型和名称进行组合，在框架中经常被用作键进行使用，这样做不仅可以确保唯一性，还支持对于键进行进一步的细化拓展。</p><h3 id="关于导表工具"><a href="#关于导表工具" class="headerlink" title="关于导表工具"></a>关于导表工具</h3><p>整个流程中可以看到都是通过txt文件或者二进制文件提供数据的。而txt表的来源是需要外部导入到项目中去的，比如先通过Excel进行表格设计，然后导出为txt文件，再导入到项目中。这样的做法虽然简单，但也有很多不便之处，比如修改和拓展表的话，就需要重新导入文件，重新走一遍Excel导出以制表符分割的txt文件，然后修改编码格式的流程，如果直接在txt文件上面进行修改的话，很可能把格式弄错，导致数据解析错误，但本人目前没有发现GF里面有提供Execl导表工具，所以目前只能下这样的总结。</p><h3 id="关于拓展性"><a href="#关于拓展性" class="headerlink" title="关于拓展性"></a>关于拓展性</h3><p>关于数据表的使用，其实还有很多地方可以拓展，比如枚举的一键生成或者再进一步进行封装等等都是可以的。有兴趣的可以参考花卷的TowerDefense项目里面对应的Data模块，这里就不赘述了。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://blog.csdn.net/qq_37619255/article/details/129829566">哈哈的模块使用说明</a></li><li><a href="https://www.drflower.top/posts/6ca825f5/">花卷的塔防项目</a></li><li><a href="https://www.bilibili.com/video/BV1sE411C7cu">烟雨的视频演示</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> GameFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GameFramework </tag>
            
            <tag> 配置 </tag>
            
            <tag> 数据表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GameFramework解析：全局配置(Config)</title>
      <link href="/2024/11/06/gf_config/"/>
      <url>/2024/11/06/gf_config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要明白的一点是GF里面的全局配置并不是指的一般意义上的数据表，全局配置表的格式不能随便自定义，它的格式必须与当前的ConfigHelper里面写定的解析格式保持一致，否则无法解析。而它是用来存储一些全局性质的只读配置，如玩家初始速度、游戏初始音量等。</p><h2 id="全局配置模块结构图"><a href="#全局配置模块结构图" class="headerlink" title="全局配置模块结构图"></a>全局配置模块结构图</h2><img src="/img/gf_config.png" class="post-image" />从结构上就可以看出几个点：<ul><li>ConfigManager和DataProvider存在许多个相同的接口，是因为ConfigManager主要是对DataProvider里面的方法进行封装，模块的核心逻辑位于DataProvider。</li><li>DataProvider和DefaultConfigHelper的核心功能方法名称相同，是因为真正的对配置文件的读取，解析功能位于DefaultConfigHelper。</li></ul><p>这样做的好处是不仅实现了解耦，而且方便功能的修改和拓展，ConfigManager存储解析好的配置数据，并提供给外界功能接口；模块核心逻辑位于DataProvider；读取和解析的逻辑位于ConfigHelper。使用者可以使用默认的DefaultConfigHelper来加载对应格式的配置文件，也可以根据自己项目的需求，去书写自己的ConfigHelper来实现自定义的配置格式和对应的解析逻辑。</p><h2 id="读取解析存储全局配置流程"><a href="#读取解析存储全局配置流程" class="headerlink" title="读取解析存储全局配置流程"></a>读取解析存储全局配置流程</h2><img src="/img/gf_config_process.png" class="post-image" />整个流程为：读取————>解析————>存储。根据资源的名称，读取相对应的文件，然后根据定义的解析规则，解析成对应的配置数据，最后存储到ConfigManager里面。其中也支持二进制文件，并设置了相对应的缓存步骤对此格式的配置文件进行处理。<h2 id="ConfigManager"><a href="#ConfigManager" class="headerlink" title="ConfigManager"></a>ConfigManager</h2><p>ConfigManager主要是对DataProvider里面的方法进行封装，提供给外部功能接口实现配置的读取，解析，并且会存储解析好的全局配置数据，供外界使用。</p><h3 id="类内信息"><a href="#类内信息" class="headerlink" title="类内信息"></a>类内信息</h3><ul><li>m_configData：存储解析好的全局配置数据,提供给外界调用。根据其Value的ConfigData类型，可以得知支持的数据类型包括 int、float、string以及bool这四类。</li><li>m_DataProvider：模块的核心逻辑,用来读取配置文件。</li><li>m_configHelper：ConfigHelper的实例，用来解析配置文件。</li></ul><h2 id="DataProvider"><a href="#DataProvider" class="headerlink" title="DataProvider"></a>DataProvider</h2><p>Config模块的核心逻辑书写处，主要是通过获取的资源模块接口去读取配置文件，然后放入ConfigHelper里面进行解析。</p><h3 id="类内信息-1"><a href="#类内信息-1" class="headerlink" title="类内信息"></a>类内信息</h3><ul><li>BlockSize: 缓存块大小，用来缓存配置文件的二进制流。</li><li>s_CachedBytes: 用于存储缓存的二进制流。之所以专门在此定义一下是为了避免频繁的内存分配，提高效率的同时降低内存碎片的可能性。</li><li>m_Owner: 当前DataProvider的拥有者，也就是ConfigManager。DataProvider是GF的基础模块，这里是ConfigManager在使用，这样做自然也是为了方便使用者修改和拓展。</li><li>m_ResourceManager: 资源管理器接口，用来读取配置文件。</li><li>m_DataProviderHelper：DataProviderHelper的实例，用来解析配置文件。这里的话其实就是DefaultConfigHelper的实例。</li></ul><p>功能接口的也是支持对于文件（包含二进制文件）的读取，解析，存储。通过结构图和流程图已经能够直观了解到，这里不再赘述。</p><h3 id="二进制流的缓存与释放"><a href="#二进制流的缓存与释放" class="headerlink" title="二进制流的缓存与释放"></a>二进制流的缓存与释放</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 确保二进制流缓存分配足够大小的内存并缓存。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ensureSize&quot;&gt;</span>要确保二进制流缓存分配内存的大小。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnsureCachedBytesSize</span>(<span class="params"><span class="built_in">int</span> ensureSize</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ensureSize &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Ensure size is invalid.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s_CachedBytes == <span class="literal">null</span> || s_CachedBytes.Length &lt; ensureSize)</span><br><span class="line">    &#123;</span><br><span class="line">        FreeCachedBytes();</span><br><span class="line">        <span class="built_in">int</span> size = (ensureSize - <span class="number">1</span> + BlockSize) / BlockSize * BlockSize;</span><br><span class="line">        s_CachedBytes = <span class="keyword">new</span> <span class="built_in">byte</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 释放缓存的二进制流。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FreeCachedBytes</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    s_CachedBytes = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DefaultConfigHelper"><a href="#DefaultConfigHelper" class="headerlink" title="DefaultConfigHelper"></a>DefaultConfigHelper</h2><p>这是GF默认的全局配置解析器，看到这里，可以了解到因为每个部分都是功能分明，相对独立的，整个模块都便于支持使用者根据自己的需求和功能去修改和拓展的。<br>这里简单举例说明一下DefaultConfigHelper的的解析规则。</p><p>比如，接下来我们存在如下的全局配置文件，其配置内容如下：</p><p>我们调用模块接口进行读取：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameEntry.Config.ReadData(configAssetName, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>来到DefaultConfigHelper的解析方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] ColumnSplitSeparator = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;\t&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> BytesAssetExtension = <span class="string">&quot;.bytes&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> ColumnCount = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析全局配置。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;configManager&quot;&gt;</span>全局配置管理器。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;configString&quot;&gt;</span>要解析的全局配置字符串。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否解析全局配置成功。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">ParseData</span>(<span class="params">IConfigManager configManager, <span class="built_in">string</span> configString, <span class="built_in">object</span> userData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> configLineString = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((configLineString = configString.ReadLine(<span class="keyword">ref</span> position)) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (configLineString[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span>[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);</span><br><span class="line">            <span class="keyword">if</span> (splitedLine.Length != ColumnCount)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Warning(<span class="string">&quot;Can not parse config line string &#x27;&#123;0&#125;&#x27; which column count is invalid.&quot;</span>, configLineString);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> configName = splitedLine[<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">string</span> configValue = splitedLine[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (!configManager.AddConfig(configName, configValue))</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Warning(<span class="string">&quot;Can not add config with config name &#x27;&#123;0&#125;&#x27; which may be invalid or duplicate.&quot;</span>, configName);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.Warning(<span class="string">&quot;Can not parse config string with exception &#x27;&#123;0&#125;&#x27;.&quot;</span>, exception.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到通过以制表符为分割，将配置文件的每一行内容分割成四个字段（ColumnCount），获取到了第一个和第四个配置信息，并将其添加到ConfigManager里面。</p><p>使用的情况：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameEntry.Config.GetInt(<span class="string">&quot;Scene.Menu&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样，我们就实现了全局配置的定义，读取，解析，存储以及使用。</p>]]></content>
      
      
      <categories>
          
          <category> GameFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GameFramework </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GameFramework解析：实体(Entity)</title>
      <link href="/2024/10/31/gf_entity/"/>
      <url>/2024/10/31/gf_entity/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你看过GF的UI模块，那么实体模块就会相当容易理解，因为实体模块的结构和UI模块有许多相似的地方。<br>先来看一下GF官方是如何定义的：</p><blockquote><p>我们将游戏场景中，动态创建的一切物体定义为实体。此模块提供管理实体和实体组的功能，如显示隐藏实体、挂接实体（如挂接武器、坐骑，或者抓起另一个实体）等。实体使用结束后可以不立刻销毁，从而等待下一次重新使用。</p></blockquote><h2 id="实体模块结构"><a href="#实体模块结构" class="headerlink" title="实体模块结构"></a>实体模块结构</h2><img src="/img/gf_entity.png" class="post-image" />从结构图上就可以看出，实体模块的确和UI模块的结构差不多，但也可以看见一些区别：- EntityGroup对接的下层是IEntity，也就是Entity，而不是EntityInfo。而UI模块中，UIGroup里面接收管理的是UIFormInfo，而不是UIForm.- 实体模块里面特有的功能是“附加”功能。实体可以附加其他实体，也可以被其他实体附加。- 在EntityManager中，除了管理EntityGroup，还有m_EntityInfos来存储所有的实体。UI模块中，UIManager只会直接对接UIGroup，而不会直接管理UIFormInfo。<p>接下来，我们从上往下一步一步进行拆解。</p><h2 id="EntityManager"><a href="#EntityManager" class="headerlink" title="EntityManager"></a>EntityManager</h2><p>EntityManager是外部访问框架实体模块的入口。提供给外部实体的显示、隐藏、附加、查找，获取等功能。这里从实体的生成和隐藏的流程和逻辑入手，说明EntityManager的工作原理和流程。</p><h3 id="ShowEntity流程"><a href="#ShowEntity流程" class="headerlink" title="ShowEntity流程"></a>ShowEntity流程</h3><img src="/img/gf_entity_process.png" class="post-image" /><h3 id="HideEntity流程"><a href="#HideEntity流程" class="headerlink" title="HideEntity流程"></a>HideEntity流程</h3><img src="/img/gf_entity_process_hideentity.png" class="post-image" /><h3 id="类内信息"><a href="#类内信息" class="headerlink" title="类内信息"></a>类内信息</h3><p>定义变量：</p><ul><li>m_EntityInfos：存储所有实体的列表。从结构上来讲，其实只需要一个m_EntityGroups就够了，但之所以整一个整体列表，目前还是为了方便查询和获取单个列表，经典的空间换时间。这也解释了为什么我们通过结构图上面看到的EntityGroup对接的是IEntity，而不是EntityInfo。</li><li>m_EntityGroups：存储所有实体组的列表。</li><li>m_EntitiesBeingLoaded: 正在加载的实体列表。这也是为了解决异步加载资源可能的冲突问题。</li><li>m_EntitiesToReleaseOnLoad: 待释放的实体列表。同样为了解决异步加载资源可能的冲突问题。注意这里的判断列表只是相当于一个用于判断的“标识”，与真正的实体回收逻辑无关。</li><li>m_RecycleQueue：回收实体队列。如果需要回收一个实体，会把此实体添加进当前的队列，待下一帧Update时，会把队列中的实体全部回收。</li><li>m_LoadAssetCallbacks：GF里封装了加载资源回调委托类，通过初始化实例，创建实体的时候传递给ResourceManager，资源加载完成后就会执行对应的方法。</li><li>m_ObjectPoolManager：对象池管理器。</li><li>m_ResoureceManager：资源管理器。</li><li>m_EntityHelper：实体辅助器。用于书写实体创建逻辑，开发者可以通过修改或者自写EntityHelper来实现自己的实体创建逻辑。这其实类似<span style="background-color:rgb(100,200,200,0.5)">工厂模式</span>，把创建和使用的逻辑进行了分离。</li><li>m_Serial: 实体生命周期内的唯一标识。每次创建实体的时候，都会进行自增，它是每个实体在其生命周期中内的唯一标识符。即使是同一个实体实例，在被隐藏放入对象池后重新取出使用的时候，其m_Serial也会发生变化。且它的自增在资源加载之前进行，并不依赖于资源加载完成逻辑。自然其存在对应的也是m_EntityInfos，m_EntitiesBeingLoaded，m_EntitiesToReleaseOnLoad里面key值。</li><li>m_IsShutDown: 当前模块是否关闭。</li></ul><p>提供功能：</p><ul><li>查询接口：提供GetEntityGroup，GetAllEntityGroups，HasEntity，GetEntity，GetEntities，GetAllLoadedEntities，IsLoadingEntity，GetAllLoadingEntityIds，IsValidEntity，GetParentEntity，GetChildEntityCount，GetChildEntities，GetEntityInfo来对实体和实体组进行查询和获取。</li><li>操作接口：AddEntityGroup，ShowEntity，HideEntity，HideAllLoadedEntities，AttachEntity，DetachEntity，DetachChildEntities，InternalShowEntity，InternalHideEntity来控制实体的显示，隐藏等操作。</li><li>EntityGroup管理与生命周期的传递：通过Dictionary&lt;string, EntityGroup&gt;的字典结构来存储所有的实体组。EntityManager的Update方法中会遍历整个字典，调用每一个EntityGroup的Update方法，而每个EntityGroup的Update里面又会以同样的方式调用每个实体的Update方法。如此就做到的生命周期的传递。</li><li>资源管理：在定义变量的时候，我们确实可以看到获取了对象池模块的管理器，但是并没有直接在EntityManager里面去定义对象池，而是在创建实体的时候，传递给实体组，在每个实体组里面去创建对应的对象池，用于缓存当前组的实例。这也是和UI模块的结构不同的地方。</li></ul><h2 id="EntityGroup"><a href="#EntityGroup" class="headerlink" title="EntityGroup"></a>EntityGroup</h2><p>通过上面，已经可以了解到EntityManager可以通过EntityGroup来管理实体，且可以通过轮询EntityGroup的Update方法，进而轮询Entity的Update方法，实现实体的生命周期的传递。以及每个EntityGroup里面有其对应的对象池，用于缓存当前组的实例。</p><p>EntityGroup作为EntityManager的内部类，其的主要作用就是管理其组内的实体，并提供相应的接口给EntityManager来对其组实体进行查询和操作。但是相对于UI模块里面，UIGroup里面包含的暂停，恢复，修改深度，刷新管理页面等功能，EntityGroup并没有这些功能，不需要这些规则，也自然不需要这样的功能，这才能保证实体模块在使用中的灵活性。<br>此外，说到存储实体的对象池分部到每一个EntityGroup里面，是因为每一种实体其实都是一个对象池。</p><p>那么分组按照什么来分呢？<br>这里的分组其实就是有一个种实体为其分一组。注意这里的说法，并不是说“一类实体分一组，一组内可以包含多种同类型的实体”，而是单纯的一类实体就是一个组。比如武器这个总的类型里面有3种敌人：敌人A，敌人B，敌人C，那么就分三个组————敌人A，敌人B，敌人C各自单独就是一组，因为这每一种敌人都可能被多次生成，所以一种就是一组，并不是说敌人一个组里面包含了这三种敌人。<br><img src="/img/gf_entity_config.png" class="post-image" /></p><h3 id="类内信息-1"><a href="#类内信息-1" class="headerlink" title="类内信息"></a>类内信息</h3><p>变量定义：</p><ul><li>m_Name：实体组的名称。</li><li>m_Entities：实体组内的存放当前组所有实体的链表。</li><li>m_InstancePool：实体组内的对象池。</li><li>m_EntityGroupHelper: 实体组辅助器。</li><li>m_CachedNodes：缓存的节点。起到标识以解决冲突的作用，这个缓存节点是用于解决执行当前实体Update和移除时候的冲突的。Update中通过此节点缓存，移除方法中通过此节点判断是否当前要移除的实体是否正在执行Update，如果是，那就给它跳过，避免出错。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// EntityManager.EntityGroup.cs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 实体组轮询。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">float</span> elapseSeconds, <span class="built_in">float</span> realElapseSeconds</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkedListNode&lt;IEntity&gt; current = m_Entities.First;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_CachedNode = current.Next;</span><br><span class="line">        current.Value.OnUpdate(elapseSeconds, realElapseSeconds);</span><br><span class="line">        current = m_CachedNode;</span><br><span class="line">        m_CachedNode = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从实体组移除实体。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entity&quot;&gt;</span>要移除的实体。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveEntity</span>(<span class="params">IEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_CachedNode != <span class="literal">null</span> &amp;&amp; m_CachedNode.Value == entity)</span><br><span class="line">    &#123;</span><br><span class="line">        m_CachedNode = m_CachedNode.Next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_Entities.Remove(entity))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Entity group &#x27;&#123;0&#125;&#x27; not exists specified entity &#x27;[&#123;1&#125;]&#123;2&#125;&#x27;.&quot;</span>, m_Name, entity.Id.ToString(), entity.EntityAssetName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供功能：</p><ul><li>查询接口：HasEntity，GetEntity，GetEntities，GetAllEntities可以查询和获取对应的实体。</li><li>操作接口：AddEntity，RemoveEntity可以对实体组进行操作。</li><li>对象池相关操作接口：RegisterEntityInstanceObject，SpawnEntityInstanceObject，UnspawnEntity，SetEntityInstanceLocked，SetEntityInstancePriority能够设置控制当前组内对象池。</li></ul><h2 id="EntityInfo"><a href="#EntityInfo" class="headerlink" title="EntityInfo"></a>EntityInfo</h2><p>和EntityGroup一样，EntityInfo都是EntityManager的内部类，m_EntityInfos里面装的并不是IEntiy，而是EntityInfo。EntityInfo对Entity的相关信息进行了一层封装，里面除了包含对应的实体实例之外，还包含了当前实例的状态，EntityManager在设置和获取实体的状态时候，都是通过设置m_EntityInfos里面对应EnttiyInfo进行的。<br>里面主要就四个东西对应四个功能：</p><ul><li>m_Entity: 实体实例。</li><li>m_Status: 当前实体的状态。对应其生命周期。</li><li>m_ParentEntity: 父实体。用于控制当前实体附加的父实体。</li><li>m_ChildEntities: 子实体列表。用于控制附加在此实体上的子实体。</li></ul><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>GF层里面提供的是IEntity接口，UGF层里面的Entity类实现了此接口。通过上面的打开流程可以得知，在通过Entity脚本是通过EntityHelper创建并添加到其实体上的，以让此实体接收EntityManager和其对应的EntityGroup的管理。</p><p>Entity在这里两个作用：</p><ul><li>让当前实体接收EntityManager和EntityGroup的管理。</li><li>传递生命周期给逻辑层EntityLogic。</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>OnInit &amp; OnRecycle<ul><li>OnInit:在EntityManager执行ShowEntity的时候被调用。初始化Id和资源名称之后，获取或者创建EntityLogic到当前的实体上，并执行EnityLogic的OnInit方法。</li><li>OnRecycle:在EntityManager执行HideEntity的时候被调用。执行EntityLogic的OnRecycle方法，并关闭其EntityLogic，让当前Id归零。</li></ul></li><li>OnShow &amp; OnHide<ul><li>OnShow:OnInit执行后调用。执行EntityLogic的OnShow方法</li><li>OnHide:OnRecycle执行之前调用。执行EntityLogic的OnHide方法。</li></ul></li><li>OnAttached &amp; OnDetached | OnAttachTo &amp; OnDetachFrom<ul><li>OnAttached:当实体附加其他实体时被调用。</li><li>OnDetached:当实体被解除其附加实体的时候被调用。</li><li>OnAttachTo:当实体被附加在其他实体上时被调用。</li><li>OnDetachFrom:当实体被从其附加的实体上解除的时候调用。</li></ul></li><li>OnUpdate：通过EntityGroup传递。</li></ul><h2 id="EntityLogic"><a href="#EntityLogic" class="headerlink" title="EntityLogic"></a>EntityLogic</h2><p>EntityLogic是实体书写业务逻辑的地方，它接受了Entity传递过来的生命周期，对于任何的基层逻辑我们都可以在EntityLogic里面书写，比如在默认逻辑里面如果一个实体被隐藏了，除了其GO被对象池回收外，此GO会因为EntityLogic的OnHide方法被设置不可见，我们只需要根据当前需求去书写当前实体的业务逻辑即可。<br>不过，一般的话，并不会直接在基层的EntityLogic里面写太多的逻辑，而是通过继承EntityLogic，然后重写并拓展其中的方法来实现自己的业务逻辑。另外，如果是自己重写了EntityLogic，那么就需要提前挂载对应的脚本到实体预制体上面，否则Entity只会添加一个默认的EntityLogic。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://gameframework.cn/document/entity/">GF官方文档</a></li><li><a href="https://blog.csdn.net/qq_37619255/article/details/129624414">好啊的使用说明</a></li><li><a href="https://www.drflower.top/posts/16213a73/">花卷整理的GF中的UI模块</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> GameFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实体 </tag>
            
            <tag> GameFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GameFramework解析：事件(Event)</title>
      <link href="/2024/10/27/gf_event/"/>
      <url>/2024/10/27/gf_event/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事件模块是游戏中很重要的一个模块，而GameFramework的事件模块在网上能找到很多文章，但基本都是讲解其应用方面的，并没有对其源码进行分析。<br>这里阐述此模块通过如下三个方面：基本的类内信息说明，GF里面存储管理事件的形式，事件抛出和取消订阅的冲突问题。<br>这里就不用应用举例了，有需要可以查看下面参考文档。</p><h2 id="Event模块结构"><a href="#Event模块结构" class="headerlink" title="Event模块结构"></a>Event模块结构</h2><img src="/img/gf_event.png" class="post-image" /><p>从上面的结构图也可以看出，EventManager作为事件模块的管理器，其作用主要是对于EventPool的功能进行封装，并提供对应的接口给外部使用。因此本模块的核心逻辑主要在EventPool中。</p><h2 id="EventPool"><a href="#EventPool" class="headerlink" title="EventPool"></a>EventPool</h2><p>作为事件模块的核心， EventPool处理着事件的发布、订阅、移除等功能的同时也会严格检查事件订阅的匹配情况，不允许出现重复订阅，也不允许出现重复取消订阅或取消订阅尚未订阅的事件处理函数，如果出现这些情况，将会抛出异常。<br>观察者模式可以从“发布者”和“订阅者”两个角度来看，EventPool里面对应的两个方面便是 “事件” 和 “事件处理函数” 。事件处理函数是订阅者注册给发布者的，一个事件可以包含多个事件处理函数。抛出一个事件，会执行其所有订阅者的事件处理函数。</p><h3 id="类内信息"><a href="#类内信息" class="headerlink" title="类内信息"></a>类内信息</h3><ul><li>字段功能说明：<ul><li>m_EventHandlers：GF多值字典。key为事件ID，value为事件处理函数的列表，毕竟一个事件可以有多个订阅者，GF是通过多值字典来存储的。</li><li>m_Events：事件队列。这里的事件(Event)是EventPool中的一个内部类，主要用于记录当前正在抛出的事件。因为其在Update里面执行，可以确保安全性，保证在主线程中回调处理函数，但事件会在抛出后的下一帧分发。</li><li>m_CachedNotes：事件节点缓存字典。缓存正在抛出的事件节点，用于解决正在抛出事件节点和取消订阅事件节点的冲突问题。通过检测m_CachedNotes里面的数据可以判断当前要取消订阅的事件是否正在被抛出。</li><li>m_TempNodes：临时事件节点列表。缓存m_CachedNotes里面的节点。在取消订阅的时候，如果当前取消的事件正在被抛出的话，就缓存下一个节点到m_TempNodes，然后给m_cachedNotes里面覆盖赋值，跳过这一个节点的事件派发。</li><li>m_EventPoolMode：事件池模式。这里的模式主要用于控制事件池的事件处理函数的执行模型，参考EventPoolMode枚举分为四种：<ul><li>Default，默认事件池模式，即必须存在有且只有一个事件处理函数。</li><li>AllowNoHandler，允许不存在事件处理函数。</li><li>AllowMultiHandler，允许存在多个事件处理函数。</li><li>AllowDuplicateHandler，允许存在重复的事件处理函数。<br>一般的话使用的是EventPoolMode.AllowNoHandler | EventPoolMode.AllowMultiHandler 这两个模式</li></ul></li><li>m_DefaultHandler：默认额外事件处理函数。通过给这个委托赋值，可以设置一个额外的的事件处理函数，当抛出事件后，如果有此委托有内容，就会调用，方便进行拓展。</li></ul></li><li>方法说明：<ul><li>Update：生命周期里轮询方法。这里会检测事件列表里面的事件进行派发，并调用对应的事件处理函数。</li><li>Shutdown：关闭并清理事件池。</li><li>Clear：清空当前待处理的事件列表。</li><li>Count：获取对应事件的事件处理函数的数量。</li><li>Check：检查对应事件是否存在事件处理函数。</li><li>Subscribe：订阅事件。</li><li>Unsubscribe：取消订阅事件。</li><li>SetDefaultHandler：设置默认额外事件处理函数。</li><li>Fire和FireNow: 都是抛出事件，Fire会走上面的流程。而FireNow则是立刻执行，这个操作不是线程安全的，但事件会立刻分发。</li><li>HandleEvent：处理事件和事件函数的核心方法。</li></ul></li></ul><p>EventPool源码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameFramework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 事件池。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>事件类型。<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">EventPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">BaseEventArgs</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> GameFrameworkMultiDictionary&lt;<span class="built_in">int</span>, EventHandler&lt;T&gt;&gt; m_EventHandlers;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Queue&lt;Event&gt; m_Events;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt; m_CachedNodes;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt; m_TempNodes;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> EventPoolMode m_EventPoolMode;</span><br><span class="line">        <span class="keyword">private</span> EventHandler&lt;T&gt; m_DefaultHandler;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化事件池的新实例。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mode&quot;&gt;</span>事件池模式。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EventPool</span>(<span class="params">EventPoolMode mode</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_EventHandlers = <span class="keyword">new</span> GameFrameworkMultiDictionary&lt;<span class="built_in">int</span>, EventHandler&lt;T&gt;&gt;();</span><br><span class="line">            m_Events = <span class="keyword">new</span> Queue&lt;Event&gt;();</span><br><span class="line">            m_CachedNodes = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt;();</span><br><span class="line">            m_TempNodes = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt;();</span><br><span class="line">            m_EventPoolMode = mode;</span><br><span class="line">            m_DefaultHandler = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取事件处理函数的数量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> EventHandlerCount</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_EventHandlers.Count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取事件数量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> EventCount</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_Events.Count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 事件池轮询。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">float</span> elapseSeconds, <span class="built_in">float</span> realElapseSeconds</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (m_Events.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Event eventNode = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">lock</span> (m_Events)</span><br><span class="line">                &#123;</span><br><span class="line">                    eventNode = m_Events.Dequeue();</span><br><span class="line">                    HandleEvent(eventNode.Sender, eventNode.EventArgs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ReferencePool.Release(eventNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 关闭并清理事件池。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shutdown</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Clear();</span><br><span class="line">            m_EventHandlers.Clear();</span><br><span class="line">            m_CachedNodes.Clear();</span><br><span class="line">            m_TempNodes.Clear();</span><br><span class="line">            m_DefaultHandler = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清理事件。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (m_Events)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Events.Clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取事件处理函数的数量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span>事件类型编号。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>事件处理函数的数量。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Count</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameFrameworkLinkedListRange&lt;EventHandler&lt;T&gt;&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;EventHandler&lt;T&gt;&gt;);</span><br><span class="line">            <span class="keyword">if</span> (m_EventHandlers.TryGetValue(id, <span class="keyword">out</span> range))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> range.Count;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 检查是否存在事件处理函数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span>事件类型编号。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>要检查的事件处理函数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否存在事件处理函数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Check</span>(<span class="params"><span class="built_in">int</span> id, EventHandler&lt;T&gt; handler</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (handler == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Event handler is invalid.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m_EventHandlers.Contains(id, handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 订阅事件处理函数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span>事件类型编号。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>要订阅的事件处理函数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params"><span class="built_in">int</span> id, EventHandler&lt;T&gt; handler</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (handler == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Event handler is invalid.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!m_EventHandlers.Contains(id))</span><br><span class="line">            &#123;</span><br><span class="line">                m_EventHandlers.Add(id, handler);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((m_EventPoolMode &amp; EventPoolMode.AllowMultiHandler) != EventPoolMode.AllowMultiHandler)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Event &#x27;&#123;0&#125;&#x27; not allow multi handler.&quot;</span>, id.ToString()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((m_EventPoolMode &amp; EventPoolMode.AllowDuplicateHandler) != EventPoolMode.AllowDuplicateHandler &amp;&amp; Check(id, handler))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Event &#x27;&#123;0&#125;&#x27; not allow duplicate handler.&quot;</span>, id.ToString()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m_EventHandlers.Add(id, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 取消订阅事件处理函数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span>事件类型编号。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>要取消订阅的事件处理函数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Unsubscribe</span>(<span class="params"><span class="built_in">int</span> id, EventHandler&lt;T&gt; handler</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (handler == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Event handler is invalid.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m_CachedNodes.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt; cachedNode <span class="keyword">in</span> m_CachedNodes)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cachedNode.Value != <span class="literal">null</span> &amp;&amp; cachedNode.Value.Value == handler)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_TempNodes.Add(cachedNode.Key, cachedNode.Value.Next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (m_TempNodes.Count &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt; cachedNode <span class="keyword">in</span> m_TempNodes)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_CachedNodes[cachedNode.Key] = cachedNode.Value;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    m_TempNodes.Clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!m_EventHandlers.Remove(id, handler))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Event &#x27;&#123;0&#125;&#x27; not exists specified handler.&quot;</span>, id.ToString()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置默认事件处理函数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>要设置的默认事件处理函数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetDefaultHandler</span>(<span class="params">EventHandler&lt;T&gt; handler</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_DefaultHandler = handler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>事件源。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>事件参数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"><span class="built_in">object</span> sender, T e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Event is invalid.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Event eventNode = Event.Create(sender, e);</span><br><span class="line">            <span class="keyword">lock</span> (m_Events)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Events.Enqueue(eventNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>事件源。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>事件参数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FireNow</span>(<span class="params"><span class="built_in">object</span> sender, T e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Event is invalid.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HandleEvent(sender, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 处理事件结点。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>事件源。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>事件参数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleEvent</span>(<span class="params"><span class="built_in">object</span> sender, T e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">bool</span> noHandlerException = <span class="literal">false</span>;</span><br><span class="line">            GameFrameworkLinkedListRange&lt;EventHandler&lt;T&gt;&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;EventHandler&lt;T&gt;&gt;);</span><br><span class="line">            <span class="keyword">if</span> (m_EventHandlers.TryGetValue(e.Id, <span class="keyword">out</span> range))</span><br><span class="line">            &#123;</span><br><span class="line">                LinkedListNode&lt;EventHandler&lt;T&gt;&gt; current = range.First;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current != range.Terminal)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_CachedNodes[e] = current.Next != range.Terminal ? current.Next : <span class="literal">null</span>;</span><br><span class="line">                    current.Value(sender, e);</span><br><span class="line">                    current = m_CachedNodes[e];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                m_CachedNodes.Remove(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (m_DefaultHandler != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_DefaultHandler(sender, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((m_EventPoolMode &amp; EventPoolMode.AllowNoHandler) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                noHandlerException = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ReferencePool.Release(e);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (noHandlerException)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Event &#x27;&#123;0&#125;&#x27; not allow no handler.&quot;</span>, e.Id.ToString()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多值字典和链表范围"><a href="#多值字典和链表范围" class="headerlink" title="多值字典和链表范围"></a>多值字典和链表范围</h3><p>GameFramework的多值字典(GameFrameworkMultiDictionary)和链表范围(GameFrameworkLinkedListRange)是GameFramework的基础模块。这里的目的是为了满足同一事件多个事件处理函数的需求。是GF里面存储管理事件的形式。</p><p>先说链表范围，链表范围这个说法顾名思义，表示的就是“链表中的某个范围”。通过确定起始节点和终止节点，就可以确定一个链表范围。这里的作用是用于确定单个事件所包含哪些事件处理函数。<br>多值字典里面包含两个定义m_LinkedList 和 m_Dictionary：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> GameFrameworkLinkedList&lt;TValue&gt; m_LinkedList;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt; m_Dictionary;</span><br></pre></td></tr></table></figure><p>通过m_LinkedList链表来存储所有的事件处理函数，m_Dictionary则是根据事件ID来存储对应事件处理函数的链表范围。这样做的好处便是，只需要通过一条链表就可以确定好一个事件有哪些事件处理函数，而不需要每一个事件都去单独创建一个链表去填充。</p><p>源码：<br>GameFrameworkMultiDictionary：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameFramework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 游戏框架多值字典类。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TKey&quot;&gt;</span>指定多值字典的主键类型。<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TValue&quot;&gt;</span>指定多值字典的值类型。<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">GameFrameworkMultiDictionary</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt; : <span class="title">IEnumerable</span>&lt;<span class="title">KeyValuePair</span>&lt;<span class="title">TKey</span>, <span class="title">GameFrameworkLinkedListRange</span>&lt;<span class="title">TValue</span>&gt;&gt;&gt;, <span class="title">IEnumerable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> GameFrameworkLinkedList&lt;TValue&gt; m_LinkedList;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt; m_Dictionary;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化游戏框架多值字典类的新实例。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameFrameworkMultiDictionary</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_LinkedList = <span class="keyword">new</span> GameFrameworkLinkedList&lt;TValue&gt;();</span><br><span class="line">            m_Dictionary = <span class="keyword">new</span> Dictionary&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取多值字典中实际包含的主键数量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_Dictionary.Count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取多值字典中指定主键的范围。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>指定的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>指定主键的范围。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> GameFrameworkLinkedListRange&lt;TValue&gt; <span class="keyword">this</span>[TKey key]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                GameFrameworkLinkedListRange&lt;TValue&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;TValue&gt;);</span><br><span class="line">                m_Dictionary.TryGetValue(key, <span class="keyword">out</span> range);</span><br><span class="line">                <span class="keyword">return</span> range;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清理多值字典。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_Dictionary.Clear();</span><br><span class="line">            m_LinkedList.Clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 检查多值字典中是否包含指定主键。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>要检查的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>多值字典中是否包含指定主键。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params">TKey key</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Dictionary.ContainsKey(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 检查多值字典中是否包含指定值。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>要检查的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>要检查的值。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>多值字典中是否包含指定值。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params">TKey key, TValue <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameFrameworkLinkedListRange&lt;TValue&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;TValue&gt;);</span><br><span class="line">            <span class="keyword">if</span> (m_Dictionary.TryGetValue(key, <span class="keyword">out</span> range))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> range.Contains(<span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 尝试获取多值字典中指定主键的范围。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>指定的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;range&quot;&gt;</span>指定主键的范围。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否获取成功。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">TryGetValue</span>(<span class="params">TKey key, <span class="keyword">out</span> GameFrameworkLinkedListRange&lt;TValue&gt; range</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Dictionary.TryGetValue(key, <span class="keyword">out</span> range);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向指定的主键增加指定的值。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>指定的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>指定的值。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">TKey key, TValue <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameFrameworkLinkedListRange&lt;TValue&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;TValue&gt;);</span><br><span class="line">            <span class="keyword">if</span> (m_Dictionary.TryGetValue(key, <span class="keyword">out</span> range))</span><br><span class="line">            &#123;</span><br><span class="line">                m_LinkedList.AddBefore(range.Terminal, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LinkedListNode&lt;TValue&gt; first = m_LinkedList.AddLast(<span class="keyword">value</span>);</span><br><span class="line">                LinkedListNode&lt;TValue&gt; terminal = m_LinkedList.AddLast(<span class="literal">default</span>(TValue));</span><br><span class="line">                m_Dictionary.Add(key, <span class="keyword">new</span> GameFrameworkLinkedListRange&lt;TValue&gt;(first, terminal));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 从指定的主键中移除指定的值。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>指定的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>指定的值。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否移除成功。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Remove</span>(<span class="params">TKey key, TValue <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameFrameworkLinkedListRange&lt;TValue&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;TValue&gt;);</span><br><span class="line">            <span class="keyword">if</span> (m_Dictionary.TryGetValue(key, <span class="keyword">out</span> range))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (LinkedListNode&lt;TValue&gt; current = range.First; current != <span class="literal">null</span> &amp;&amp; current != range.Terminal; current = current.Next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current.Value.Equals(<span class="keyword">value</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (current == range.First)</span><br><span class="line">                        &#123;</span><br><span class="line">                            LinkedListNode&lt;TValue&gt; next = current.Next;</span><br><span class="line">                            <span class="keyword">if</span> (next == range.Terminal)</span><br><span class="line">                            &#123;</span><br><span class="line">                                m_LinkedList.Remove(next);</span><br><span class="line">                                m_Dictionary.Remove(key);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                m_Dictionary[key] = <span class="keyword">new</span> GameFrameworkLinkedListRange&lt;TValue&gt;(next, range.Terminal);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        m_LinkedList.Remove(current);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 从指定的主键中移除所有的值。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>指定的主键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否移除成功。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">RemoveAll</span>(<span class="params">TKey key</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameFrameworkLinkedListRange&lt;TValue&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;TValue&gt;);</span><br><span class="line">            <span class="keyword">if</span> (m_Dictionary.TryGetValue(key, <span class="keyword">out</span> range))</span><br><span class="line">            &#123;</span><br><span class="line">                m_Dictionary.Remove(key);</span><br><span class="line"></span><br><span class="line">                LinkedListNode&lt;TValue&gt; current = range.First;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    LinkedListNode&lt;TValue&gt; next = current != range.Terminal ? current.Next : <span class="literal">null</span>;</span><br><span class="line">                    m_LinkedList.Remove(current);</span><br><span class="line">                    current = next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>循环访问集合的枚举数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Enumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumerator(m_Dictionary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>循环访问集合的枚举数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        IEnumerator&lt;KeyValuePair&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt;&gt;.GetEnumerator()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetEnumerator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>循环访问集合的枚举数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        IEnumerator IEnumerable.GetEnumerator()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetEnumerator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StructLayout(LayoutKind.Auto)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">struct</span> Enumerator : IEnumerator&lt;KeyValuePair&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt;&gt;, IEnumerator</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> Dictionary&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt;.Enumerator m_Enumerator;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">internal</span> <span class="title">Enumerator</span>(<span class="params">Dictionary&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt; dictionary</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dictionary == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Dictionary is invalid.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                m_Enumerator = dictionary.GetEnumerator();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取当前结点。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="keyword">public</span> KeyValuePair&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt; Current</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> m_Enumerator.Current;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取当前的枚举数。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="built_in">object</span> IEnumerator.Current</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> m_Enumerator.Current;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 清理枚举数。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                m_Enumerator.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取下一个结点。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回下一个结点。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_Enumerator.MoveNext();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 重置枚举数。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="keyword">void</span> IEnumerator.Reset()</span><br><span class="line">            &#123;</span><br><span class="line">                ((IEnumerator&lt;KeyValuePair&lt;TKey, GameFrameworkLinkedListRange&lt;TValue&gt;&gt;&gt;)m_Enumerator).Reset();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GameFrameworkLinkedListRange：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameFramework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 游戏框架链表范围。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>指定链表范围的元素类型。<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    [<span class="meta">StructLayout(LayoutKind.Auto)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> GameFrameworkLinkedListRange&lt;T&gt; : IEnumerable&lt;T&gt;, IEnumerable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> LinkedListNode&lt;T&gt; m_First;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> LinkedListNode&lt;T&gt; m_Terminal;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化游戏框架链表范围的新实例。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;first&quot;&gt;</span>链表范围的开始结点。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;terminal&quot;&gt;</span>链表范围的终结标记结点。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameFrameworkLinkedListRange</span>(<span class="params">LinkedListNode&lt;T&gt; first, LinkedListNode&lt;T&gt; terminal</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span> || terminal == <span class="literal">null</span> || first == terminal)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Range is invalid.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_First = first;</span><br><span class="line">            m_Terminal = terminal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取链表范围是否有效。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsValid</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_First != <span class="literal">null</span> &amp;&amp; m_Terminal != <span class="literal">null</span> &amp;&amp; m_First != m_Terminal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取链表范围的开始结点。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> LinkedListNode&lt;T&gt; First</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_First;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取链表范围的终结标记结点。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> LinkedListNode&lt;T&gt; Terminal</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_Terminal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取链表范围的结点数量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!IsValid)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (LinkedListNode&lt;T&gt; current = m_First; current != <span class="literal">null</span> &amp;&amp; current != m_Terminal; current = current.Next)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 检查是否包含指定值。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>要检查的值。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否包含指定值。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (LinkedListNode&lt;T&gt; current = m_First; current != <span class="literal">null</span> &amp;&amp; current != m_Terminal; current = current.Next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.Value.Equals(<span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>循环访问集合的枚举数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Enumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumerator(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>循环访问集合的枚举数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetEnumerator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>循环访问集合的枚举数。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        IEnumerator IEnumerable.GetEnumerator()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetEnumerator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 循环访问集合的枚举数。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StructLayout(LayoutKind.Auto)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">struct</span> Enumerator : IEnumerator&lt;T&gt;, IEnumerator</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> GameFrameworkLinkedListRange&lt;T&gt; m_GameFrameworkLinkedListRange;</span><br><span class="line">            <span class="keyword">private</span> LinkedListNode&lt;T&gt; m_Current;</span><br><span class="line">            <span class="keyword">private</span> T m_CurrentValue;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">internal</span> <span class="title">Enumerator</span>(<span class="params">GameFrameworkLinkedListRange&lt;T&gt; range</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!range.IsValid)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Range is invalid.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                m_GameFrameworkLinkedListRange = range;</span><br><span class="line">                m_Current = m_GameFrameworkLinkedListRange.m_First;</span><br><span class="line">                m_CurrentValue = <span class="literal">default</span>(T);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取当前结点。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="keyword">public</span> T Current</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> m_CurrentValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取当前的枚举数。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="built_in">object</span> IEnumerator.Current</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> m_CurrentValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 清理枚举数。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取下一个结点。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回下一个结点。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_Current == <span class="literal">null</span> || m_Current == m_GameFrameworkLinkedListRange.m_Terminal)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                m_CurrentValue = m_Current.Value;</span><br><span class="line">                m_Current = m_Current.Next;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 重置枚举数。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="keyword">void</span> IEnumerator.Reset()</span><br><span class="line">            &#123;</span><br><span class="line">                m_Current = m_GameFrameworkLinkedListRange.m_First;</span><br><span class="line">                m_CurrentValue = <span class="literal">default</span>(T);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决抛出和取消订阅同一事件的冲突"><a href="#解决抛出和取消订阅同一事件的冲突" class="headerlink" title="解决抛出和取消订阅同一事件的冲突"></a>解决抛出和取消订阅同一事件的冲突</h3><p>上面也说到，在事件抛出的时候，如果收到了此事件的取消订阅，这时候就会出现冲突，这里的处理方式是通过m_CachedNodes和m_TempNodes两个事件节点缓存字典来解决。如果但看HandleEvent方法，就会发现这里的缓存其实是没有绝对的功能执行必要的，而之所以添加的目的也就是添加判断冲突存在的“标识”。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 处理事件结点。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>事件源。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>事件参数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleEvent</span>(<span class="params"><span class="built_in">object</span> sender, T e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> noHandlerException = <span class="literal">false</span>;</span><br><span class="line">    GameFrameworkLinkedListRange&lt;EventHandler&lt;T&gt;&gt; range = <span class="literal">default</span>(GameFrameworkLinkedListRange&lt;EventHandler&lt;T&gt;&gt;);</span><br><span class="line">    <span class="keyword">if</span> (m_EventHandlers.TryGetValue(e.Id, <span class="keyword">out</span> range))</span><br><span class="line">    &#123;</span><br><span class="line">        LinkedListNode&lt;EventHandler&lt;T&gt;&gt; current = range.First;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current != range.Terminal)</span><br><span class="line">        &#123;</span><br><span class="line">            m_CachedNodes[e] = current.Next != range.Terminal ? current.Next : <span class="literal">null</span>;</span><br><span class="line">            current.Value(sender, e);</span><br><span class="line">            current = m_CachedNodes[e];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_CachedNodes.Remove(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_DefaultHandler != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_DefaultHandler(sender, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((m_EventPoolMode &amp; EventPoolMode.AllowNoHandler) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        noHandlerException = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReferencePool.Release(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (noHandlerException)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Event &#x27;&#123;0&#125;&#x27; not allow no handler.&quot;</span>, e.Id.ToString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取消订阅事件处理函数。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span>事件类型编号。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>要取消订阅的事件处理函数。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Unsubscribe</span>(<span class="params"><span class="built_in">int</span> id, EventHandler&lt;T&gt; handler</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(<span class="string">&quot;Event handler is invalid.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_CachedNodes.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt; cachedNode <span class="keyword">in</span> m_CachedNodes)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cachedNode.Value != <span class="literal">null</span> &amp;&amp; cachedNode.Value.Value == handler)</span><br><span class="line">            &#123;</span><br><span class="line">                m_TempNodes.Add(cachedNode.Key, cachedNode.Value.Next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_TempNodes.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">object</span>, LinkedListNode&lt;EventHandler&lt;T&gt;&gt;&gt; cachedNode <span class="keyword">in</span> m_TempNodes)</span><br><span class="line">            &#123;</span><br><span class="line">                m_CachedNodes[cachedNode.Key] = cachedNode.Value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_TempNodes.Clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_EventHandlers.Remove(id, handler))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Event &#x27;&#123;0&#125;&#x27; not exists specified handler.&quot;</span>, id.ToString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://gameframework.cn/document/event/">GF官方文档</a></li><li><a href="https://www.lfzxb.top/gameframework-diyevent/">烟雨的自定义事件案例</a></li><li><a href="https://blog.csdn.net/J_avaSmallWhite/article/details/122591528">来自白小飞</a></li><li><a href="https://busyogg.github.io/article/2474251272a9/">Busyo的自定义事件系统</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> GameFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件系统 </tag>
            
            <tag> 观察者模式 </tag>
            
            <tag> GameFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#：委托与事件</title>
      <link href="/2024/10/27/CSharp_DelegateAndEvent%20copy/"/>
      <url>/2024/10/27/CSharp_DelegateAndEvent%20copy/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为接下来想要整理一下游戏里面的事件模块，而当前项目的业务开发都是通过 Lua 进行的，有一阵子没有写 C#了，回想 C#的委托和事件，有些细节一时模糊了起来，所以打算干脆把相关的知识点整理一下，就当做复习了。</p><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><h3 id="什么是委托"><a href="#什么是委托" class="headerlink" title="什么是委托"></a>什么是委托</h3><p>无论是委托还是事件官网都没有一个简单直白的定义，只能说理解万岁。<br></p><blockquote><p>委托：用于封装方法的一种引用类型，类似于 C++的指针，但其类型安全可靠。通过封装多个方法到一个变量中，调用此变量就可以调用所有绑定的方法。你也可以将它理解性地看做“方法的容器”。</p></blockquote><h3 id="委托的写法"><a href="#委托的写法" class="headerlink" title="委托的写法"></a>委托的写法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> ---- 普通写法------</span></span><br><span class="line"><span class="comment">// 1.定义委托类型，这一步定义的是委托的类型，并不是委托的实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyEventHandler</span>()</span>;</span><br><span class="line"><span class="comment">//2.定义委托变量</span></span><br><span class="line"><span class="keyword">public</span> MyEventHandler MyEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛式委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyEventHandler</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyEventHandler</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; MyEvent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带返回值的委托，若多个返回值发生，保留最后注册的那个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">MyEventHandler</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> MyEventHandler&lt;T1, TResult&gt; MyEvent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---- 匿名方法写法，省去了定义类型的步骤------</span></span><br><span class="line"><span class="comment">// 无返回值</span></span><br><span class="line"><span class="keyword">public</span> Action MyEventHandler;</span><br><span class="line"><span class="keyword">public</span> Action&lt;<span class="keyword">in</span> T&gt; MyEventHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">public</span> Func&lt;<span class="built_in">int</span>&gt; MyEventHandler;</span><br><span class="line"><span class="keyword">public</span> Func&lt;<span class="keyword">in</span> T, <span class="keyword">out</span> TResult&gt; MyEventHandler;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/img/delegateRelation.png" class="post-image" /><h3 id="委托的作用"><a href="#委托的作用" class="headerlink" title="委托的作用"></a>委托的作用</h3><p>熟练使用委托可以提高代码的拓展性，优化代码结构。<br></p><p>这种拓展性的应用场景主要体现在于两个方面：</p><ol><li>代码结构不变的情况，执行处需要在不同的环境下给委托赋值不同的方法，就可以执行不同的功能。</li><li>一个功能的触发，涉及到多个方法的执行。</li></ol><p>先说第一种应用，这里以 GameFramework 框架中的写法举例，在 GameFramework 框架中（后面成为 GF）可以分为 GF 层和 UGF 层，GF 层的逻辑是功能的核心逻辑，而 UGF 层则是 GF 在 Unity 的应用。在 GF 的 UI 模块，一个页面的打开&#x2F;关闭的完成正如其他 UI 框架很可能执行的逻辑一样，通过事件系统派发出了一个 UI 页面打开&#x2F;关闭的事件。而为了保证 GF 层的结构和功能不变动，提供框架使用者可以根据情况自由拓展或者改变这样的操作。GF 层打开&#x2F;关闭页面的 Internal 逻辑执行完成后，并没有直接调用事件模块的接口，而是执行了一个委托。 在 UGF 层，使用者就可以通过绑定自己的方法到这个委托上，来实现自己的页面打开&#x2F;关闭后的处理逻辑，而不会完全不需要接触和改动 GF 层的代码。让我们直接看一下代码写法，<br></p><p>GF层的UIManager:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//GF层，UIManager.cs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义委托，这里你可能觉得诡异，委托的定义居然是使用Private关键字，这个我们在后面事件的时候进行说明</span></span><br><span class="line"><span class="keyword">private</span> EventHandler&lt;OpenUIFormSuccessEventArgs&gt; m_OpenUIFormSuccessEventHandler;</span><br><span class="line"><span class="keyword">private</span> EventHandler&lt;OpenUIFormFailureEventArgs&gt; m_OpenUIFormFailureEventHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供绑定接口，这里通过事件进行绑定，之所以不直接用委托，这个后面说明。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打开界面成功事件。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;OpenUIFormSuccessEventArgs&gt; OpenUIFormSuccess</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  &#123;</span><br><span class="line">    m_OpenUIFormSuccessEventHandler += <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">remove</span></span><br><span class="line">  &#123;</span><br><span class="line">    m_OpenUIFormSuccessEventHandler -= <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打开界面失败事件。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;OpenUIFormFailureEventArgs&gt; OpenUIFormFailure</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  &#123;</span><br><span class="line">    m_OpenUIFormFailureEventHandler += <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">remove</span></span><br><span class="line">  &#123;</span><br><span class="line">    m_OpenUIFormFailureEventHandler -= <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//页面打开或关闭执行对应的委托</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打开页面</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InternalOpenUIForm</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//.................省略页面打开成功逻辑......................</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//页面打开逻辑后执行完成回调</span></span><br><span class="line">  <span class="keyword">if</span> (m_OpenUIFormSuccessEventHandler != <span class="literal">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      OpenUIFormSuccessEventArgs openUIFormSuccessEventArgs = OpenUIFormSuccessEventArgs.Create(uiForm, duration, userData);</span><br><span class="line">      m_OpenUIFormSuccessEventHandler(<span class="keyword">this</span>, openUIFormSuccessEventArgs);</span><br><span class="line">      ReferencePool.Release(openUIFormSuccessEventArgs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 关闭界面。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseUIForm</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//.................省略页面关闭成功逻辑......................</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//页面关闭逻辑后执行完成回调</span></span><br><span class="line">  <span class="keyword">if</span> (m_CloseUIFormCompleteEventHandler != <span class="literal">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      CloseUIFormCompleteEventArgs closeUIFormCompleteEventArgs = CloseUIFormCompleteEventArgs.Create(uiForm.SerialId, uiForm.UIFormAssetName, uiGroup, userData);</span><br><span class="line">      m_CloseUIFormCompleteEventHandler(<span class="keyword">this</span>, closeUIFormCompleteEventArgs);</span><br><span class="line">      ReferencePool.Release(closeUIFormCompleteEventArgs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UGF层,UIComponent中的使用形式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// --------绑定方法--------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 游戏框架组件初始化。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">base</span>.Awake();</span><br><span class="line">  <span class="comment">//获取GF层的UIManager</span></span><br><span class="line">  m_UIManager = GameFrameworkEntry.GetModule&lt;IUIManager&gt;();</span><br><span class="line">  <span class="keyword">if</span> (m_UIManager == <span class="literal">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      Log.Fatal(<span class="string">&quot;UI manager is invalid.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断绑定需求，如果需要，则绑定事件，这一步使用者就可以根据自己的需求进行自定义功能添加了</span></span><br><span class="line">  <span class="keyword">if</span> (m_EnableOpenUIFormSuccessEvent)</span><br><span class="line">  &#123;</span><br><span class="line">      m_UIManager.OpenUIFormSuccess += OnOpenUIFormSuccess;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m_UIManager.OpenUIFormFailure += OnOpenUIFormFailure;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------添加的方法--------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过事件模块，派发UI打开/关闭的事件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnOpenUIFormSuccess</span>(<span class="params"><span class="built_in">object</span> sender, GameFramework.UI.OpenUIFormSuccessEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    m_EventComponent.Fire(<span class="keyword">this</span>, OpenUIFormSuccessEventArgs.Create(e));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnOpenUIFormFailure</span>(<span class="params"><span class="built_in">object</span> sender, GameFramework.UI.OpenUIFormFailureEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log.Warning(<span class="string">&quot;Open UI form failure, asset name &#x27;&#123;0&#125;&#x27;, UI group name &#x27;&#123;1&#125;&#x27;, pause covered UI form &#x27;&#123;2&#125;&#x27;, error message &#x27;&#123;3&#125;&#x27;.&quot;</span>, e.UIFormAssetName, e.UIGroupName, e.PauseCoveredUIForm.ToString(), e.ErrorMessage);</span><br><span class="line">    <span class="keyword">if</span> (m_EnableOpenUIFormFailureEvent)</span><br><span class="line">    &#123;</span><br><span class="line">        m_EventComponent.Fire(<span class="keyword">this</span>, OpenUIFormFailureEventArgs.Create(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p>再说第二个应用，通过向委托里面添加多个方法，可以实现一个功能的触发，涉及到多个方法的执行。这个从应用上来说其实很好理解，比如游戏中，我使用了恢复血量的药瓶这个道具，那么我的生命值就会进行增加，以及我的敌人会发现我在喝药，并立马进行攻击（bushi）。这种情况其实就是利用一个功能的触发，涉及到多个方法的执行这样的一个原理做到的，这样的功能实现也是建立在委托的支持上的。</p><h3 id="委托的缺点"><a href="#委托的缺点" class="headerlink" title="委托的缺点"></a>委托的缺点</h3><p>封装的矛盾。面向对象设计，讲究的是对象的封装。委托可以很好把方法进行封装，这是毋庸置疑的，但是委托同时还可以被外部直接进行赋值，一旦赋值就会失去原来绑定好的内容，这严重破坏了委托的封装性。<br>而如果把委托设置为Private的话，又会让其完全失去原来的作用。这也是上面GF里面之所以声明委托为Private，并通过事件进行封装对外赋值接口的设计原因。<br>这种情况，就要引入事件这个概念了。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是建立在对委托的语言支持之上的。通过给委托变量加上限制关键词 “event”，就可以声明一个事件。可以理解为声明一个事件不过类似于声明一个进行了封装的委托类型的变量而已。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyEventHandler</span>(<span class="params"><span class="built_in">object</span> sender, MyEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> MyEventHandler MyEvent;</span><br></pre></td></tr></table></figure><p>这样声明的事件，相较于普通的委托变量，有如下几个限制：</p><ol><li>其赋值只能在事件发布者内部进行，外部不能直接赋值。</li><li>其执行只能在事件发布者内部进行，外部不能直接调用。</li></ol><p>通过这种事件的形式，我们可以获取比委托更好的封装性。<br>利用委托的第二个应用，配合上事件，达成的类似喝血瓶的例子这种模式，进行抽象后就是所谓的 “<strong>观察者模式</strong>”，它是为了定义对象间的一种一对多的依赖关系，以便于当一个对象的状态改变时，其他依赖于它的对象会被自动告知并更新，是一种 <span style="background-color:rgb(100,200,200,0.5)">松耦合</span> 的设计模式。</p><h2 id="NET框架中的委托与事件"><a href="#NET框架中的委托与事件" class="headerlink" title=".NET框架中的委托与事件"></a>.NET框架中的委托与事件</h2><p>.NET Framework中有着固定的规范：</p><ul><li>命名空间System下存在委托原型定义<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">EventHandler</span>&lt;<span class="title">TEventArgs</span>&gt;(<span class="params"><span class="built_in">object</span> sender, TEventArgs e</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>委托类型和变量的名称和都应该以EventHandler结束</li><li>事件的命名为委托去掉EventHandler之后剩余的部分</li><li>继承自 EventArgs 的类型应该以EventArgs 结尾</li></ul><p>看到这个原型定义，可以注意到传参的两个点，一个是传参包含了object sender，另一个是 EventArgs 的类型。sender传递的是事件的发布者，EventArgs 则是事件的附加信息，包含监视者需要用到的信息。<br>EventArgs是存在System命名空间下的一个类，通过继承EventArgs类，可以定义并写入任何自己想要的数据传递给监视者，这一点从上面GF的实例中体现出来的同时，还可以看到对于传递的EventArgs类型，它还拓展进了引用池来保证回收利用。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/delegates-overview">微软官方文档</a></li><li><a href="https://www.lfzxb.top/cdelegate/">烟雨佬的应用说明</a></li><li><a href="https://www.cnblogs.com/SkySoot/archive/2012/04/05/2433639.html">SkyRoot 由浅至深的详解</a></li><li><a href="https://www.bilibili.com/video/BV1LT411L7yv/">关系图取自Witty</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 事件系统 </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兴趣使然地开通了自己的博客</title>
      <link href="/2024/10/14/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%951/"/>
      <url>/2024/10/14/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%951/</url>
      
        <content type="html"><![CDATA[<p>随着一个念头的油然而生，此个人博客也被孕育而出。<br></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>创建一个能自我表达的地方。不知数年过去，想到此番此景又会有何感悟。</li><li>记录并分享学习到的知识点。本人之前的笔记基本上是写在 Notion 上的，笔风相当随意，以自我理解为主要目的。查找资料的时候会看到各种各样的文章和写法，有的大佬的文章对于知识点研究之深，拆解之详细且通俗易懂，让人直呼牛逼，恍然大悟之余也会对所有愿意分享的人心生感谢。倘若自己也能效仿尽一份力，锻炼自己表达能力的同时，也能帮助到他人，则是不胜荣幸。</li></ul><h2 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h2><p>本博客使用 Hexo 搭建，主题选用的是Butterfly。得力于Hexo的个性化定制功能和Butterfly的简洁美观，本人对于搭建好后的整体展示效果还是比较满意的。<br></p><h3 id="Hexo的优缺点"><a href="#Hexo的优缺点" class="headerlink" title="Hexo的优缺点"></a>Hexo的优缺点</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>完全免费，整个搭建过程不需要一分钱</td><td>缺少评论，后端等系统，需要手动配置</td></tr><tr><td>上手简单，教程多且细，即使是小白也能轻易实现搭建</td><td>针对问题解决的文章较少</td></tr><tr><td>生成的是静态页面，加载速度快，灵活性强</td><td>对编辑环境有要求，无法通过手机随时随地的编辑和发布</td></tr></tbody></table><h3 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h3><p>网上相关的教程很多，这里就不再赘述了，以下是本人推荐的：</p><ul><li><a href="https://hexo.io/zh-cn/">Hexo官方文档</a></li><li><a href="https://butterfly.js.org/">Butterfly主题官网</a></li><li><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">Hexo博客的基础搭建配置</a></li><li><a href="https://www.drflower.top/posts/5920b38e/">花卷的博客搭建与其风格化配置</a></li><li><a href="https://www.fomal.cc/posts/e593433d.html">Fomalhaut的巨详细搭建教程和主题魔化教程</a></li></ul><p>编辑器本人用的vscode。如果说你没有用过Markdown编写过文档，可以参考其官方文档:</p><ul><li><a href="https://markdown.com.cn/basic-syntax/">Markdown官方文档</a></li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢来捧场的朋友们和不请自来的“阴阳水军”。非常感谢你们平日里的帮助。</p><img src="/img/mushoku.jpg" class="post-image" />]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
